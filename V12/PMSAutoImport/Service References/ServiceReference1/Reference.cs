//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMSAutoImport.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ezUpdaterServicesSoap")]
    public interface ezUpdaterServicesSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendAsyncEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int SendAsyncEmail();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckDataEntryProcessing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CheckDataEntryProcessing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Process4AltisourceInactiveJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Process4AltisourceInactiveJobs(string jobIDs, int companyId, int ownCoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CopyXMLConfigEZToCustom", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CopyXMLConfigEZToCustom(string productCode, int loginCompany);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BaseSendRequestFIS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object BaseSendRequestFIS(string login, string password, string xmlName, string xml, string xmlPatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BaseSendRequestFISWeb", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object BaseSendRequestFISWeb(string login, string password, string xmlName, string xml, string xmlPatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPublishFormUIFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetPublishFormUIFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePublishFormUIFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePublishFormUIFiles(string[] files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownLoadPublishFormUIFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] DownLoadPublishFormUIFiles(string[] files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckIsMaintenance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckIsMaintenance();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsRulesInXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string IsRulesInXML(int loginCompanyId, int formCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInventoryCategory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetInventoryCategory(int companyId, string stockkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInventoryName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetInventoryName(int companyId, string stockkey, string category, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNFRInspection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNFRInspection(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VMSValidateToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string VMSValidateToken(string serviceUrl, string postData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VMSPostData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string VMSPostData(string serviceUrl, string serviceMethod, string token, string postData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CancelMBALTAWGFjobsinIL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object CancelMBALTAWGFjobsinIL();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetQuickPrefixQ", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetQuickPrefixQ(string str1, string str2, string str3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLatestNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetLatestNotification(string companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPropertyPrefixQ", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPropertyPrefixQ(string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetExistJobAddressPrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetExistJobAddressPrefix(int companyId, int ownerCoId, int ownerContactId, string quickSearchAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLocationByUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetLocationByUser(string login, string password, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Authenticate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Authenticate(string login, string password, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetLogOnStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetLogOnStatus(int companyId, int formCoId, string productCode, int ownerCoId, bool accountInUse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientSiteSubmissionByUserId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetClientSiteSubmissionByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClearClientSitePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ClearClientSitePassword(int formCoId, string productCode, string clientSiteLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogJobsSubmittedInClientSite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogJobsSubmittedInClientSite(int userId, int[] jobIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogAttachmentsUploadedInClientSite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogAttachmentsUploadedInClientSite(int riskId, string type, string stage, string exclusiveStages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetAttachmentsUploadedByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetAttachmentsUploadedByID(int riskId, long[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetProductCodeByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetProductCodeByID(int riskId, string oldProductCode, string newProductCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogEzUpdaterException", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogEzUpdaterException(int jobId, string machine, string message, string exceptionStackTrace, int level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HasUrgentJobNotBeingProcessed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool HasUrgentJobNotBeingProcessed(int robotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ImportFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ImportFiles(int userID, int userCompanyID, int ownerCoID, int formCoID, string productCode, string fileType, string fileName, bool filterOutDuplicateJobs, bool autoDispatchJobs, int dueDateDiff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeStatusForComingOrPastDueJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ChangeStatusForComingOrPastDueJobs(string jobIDs, int companyId, int ownCoId, string productCode, string checkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetJobsNotExistInEz", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobsNotExistInEz(string productCode, string jobIDs, int companyId, int ownCoId, int formCoId);
        
        // CODEGEN: Parameter 'f' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PMSAutoImport.ServiceReference1.UploadFileResponse UploadFile(PMSAutoImport.ServiceReference1.UploadFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientSiteInfoByIPAndType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetClientSiteInfoByIPAndType(string ip, int jobType, System.DateTime startTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateJobProgress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateJobProgress(int companyId, int formCoId, string productCode, int ownerCoId, string machine, int jobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateJobLastSuccessOn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateJobLastSuccessOn(int companyId, int formCoId, string productCode, int ownerCoId, int jobType, string lastSuccessOn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientSiteSubmissionByProductCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetClientSiteSubmissionByProductCode(string prodCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CancelJobsByPOLNums", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object CancelJobsByPOLNums(object[] polNums, int companyId, string prodCode, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ReassignJobsByPOLNums", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object ReassignJobsByPOLNums(object[] polNums, int companyId, string prodCode, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CancelJobsFromFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object[] CancelJobsFromFile(string filePath, string prodType, int companyId, string prodCode, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPOLNumsFromFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object[] GetPOLNumsFromFile(string filePath, string prodType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProcessJobsInAwaitingPhotoBucket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ProcessJobsInAwaitingPhotoBucket(string jobIDs, int companyId, int ownCoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SendEmail(string emailFrom, string emailTo, string emailCc, string emailBcc, string emailSubject, string emailBody, string errMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendHtmlEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SendHtmlEmail(string emailFrom, string emailTo, string emailCc, string emailBcc, string emailSubject, string emailBody, string errMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPPOJobsWithoutCover", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPPOJobsWithoutCover(int companyId, int formCoId, int ownerCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMSICPRWithoutScope", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetMSICPRWithoutScope(int companyId, int formCoId, int ownerCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCallAttemptJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCallAttemptJobs(int companyId, int formCoId, int ownerCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateCallAttemptJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateCallAttemptJob(int companyId, int inspectionId, int riskId, bool needQC, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMCSJobWithoutLegal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetMCSJobWithoutLegal(int companyId, int formCoId, int ownerCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClearMCSLegalDoc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ClearMCSLegalDoc(int riskId, string fileNamePrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertJobAttachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertJobAttachment(int companyId, int formCoId, string productCode, int riskId, double size, string fileName);
        
        // CODEGEN: Parameter 'f' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileForPPO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PMSAutoImport.ServiceReference1.UploadFileForPPOResponse UploadFileForPPO(PMSAutoImport.ServiceReference1.UploadFileForPPORequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoDispatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AutoDispatch(object[] inspectionIds, int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeJobsStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ChangeJobsStatus(object[] jobIds, string status, bool changeByEziSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetJobStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobStatus(int inspectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TransferLPSData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object TransferLPSData(string uploadXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllJobsByCompanyIdAndStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAllJobsByCompanyIdAndStatus(int companyId, int ownerCoId, string status, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoChangeWindowDateForMCS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AutoChangeWindowDateForMCS(string fileName, int companyId, int ownerCoId, int formCoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertPreviousPhoto", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void InsertPreviousPhoto(int riskId, string photoURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateClientSiteSubmissionProgressUpdatedOn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateClientSiteSubmissionProgressUpdatedOn(int dataEntry, int formCold, string productCode, int ownerCoId, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoSetMCSPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AutoSetMCSPassword(int companyId, string productCode, int dataEntry, string vendorLogin, string oldPwd, string newPwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoChangeClientSiteAccountPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AutoChangeClientSiteAccountPassword(int companyId, int formCoId, string productCode, int ownerCoId, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetJobsForReUpload", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobsForReUpload(int companyId, int ownerCoId, string productCode, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetAttachmentsUploaded", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetAttachmentsUploaded(int riskId, string type, string stage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertBACRequestChecking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void InsertBACRequestChecking(int inspectionId, int companyId, int ownerCoId, int formCoId, string polnum, int requestId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteBACRequestChecking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteBACRequestChecking(int inspectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentsForUploadByBACService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentsForUploadByBACService(int inspectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetJobsForReqestChecking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobsForReqestChecking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientSiteSubmissionAccountInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetClientSiteSubmissionAccountInfo(int companyId, int ownerCoId, int formCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HasRanByCheckingAutoJobsFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool HasRanByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLastRunTimeByCheckingAutoJobsFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.DateTime GetLastRunTimeByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateProgressByCheckingAutoJobsFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateProgressByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ResetProgressByCheckingAutoJobsFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ResetProgressByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProceedRecheckJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ProceedRecheckJobs(string jobsXml, int companyId, int ownCoId, int qcTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddQCNoteForAwatingPhotoJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddQCNoteForAwatingPhotoJob(string polnum, int companyId, int ownCoId, string productCode, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertImportFailedJobsForRecheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void InsertImportFailedJobsForRecheck(int companyId, int ownerCoId, int formCoId, string polnum, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteImportFailedJobsForRecheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteImportFailedJobsForRecheck(string Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetImportFailedJobsForRecheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetImportFailedJobsForRecheck();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSystemSettingValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSystemSettingValue(string settingCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCheckingPendingJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCheckingPendingJob(string productCode, int companyId, int ownCoId, int formCoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddJobActionLogForRequestChecking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddJobActionLogForRequestChecking(int inspectionID, int requestID, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddJobActionLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddJobActionLog(int inspectionID, int jobActionID, string additionalInfo, int takenBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddQCForJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddQCForJob(int inspectionId, int qcTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddQCForJobWithNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddQCForJobWithNote(string jobID, int companyId, int ownCoId, string productCode, int qcTypeId, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RedoJobWithNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RedoJobWithNote(string jobID, int companyId, int ownCoId, string productCode, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCompnaySiteLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCompnaySiteLocation(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientSiteSubmission", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetClientSiteSubmission(int companyId, string productCode, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientSiteSubmissionAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetClientSiteSubmissionAll(int companyId, string productCode, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPastDueJobsForSPIINSP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPastDueJobsForSPIINSP(string fileName, int companyId, int ownCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPhotoCrossCheckJobsForSPIINSP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPhotoCrossCheckJobsForSPIINSP(string fileName, int companyId, int ownCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSubmittedJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSubmittedJobs(string jobIDs, int companyId, int ownCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ResetAttachmentUploaded", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ResetAttachmentUploaded();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLastUpdatedOnForImportationProgress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateLastUpdatedOnForImportationProgress(int hour, int companyId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogAutomationProgramStarted", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogAutomationProgramStarted(string executionId, int applicationType, int companyId, int formCoId, string productCode, int ownerCoId, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogAutomationProgramResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogAutomationProgramResult(string executionId, string status, string resultDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckSPIPDFFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckSPIPDFFile(int companyId, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateInsptn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateInsptn(int inspectionId, string fctGrpCode, string prcFctCode, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetJobFactorValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetJobFactorValue(int inspectionId, string fctGrpCode, string prcFctCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateInspST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateInspST(PMSAutoImport.ServiceReference1.InspSTDataSet ds, int inspectionId, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateWebserviceCountForMCS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateWebserviceCountForMCS(string functionName, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMCSLoginTokenByCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetMCSLoginTokenByCode(string companyId, string ownerCoId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMCSLoginToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetMCSLoginToken(string companyId, string ownerCoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddQCForSPIGCJobWithNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddQCForSPIGCJobWithNote(string jobID, int companyId, int ownCoId, string productCode, int qcTypeId, string note);
        
        // CODEGEN: Parameter 'f' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PutFileToNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        PMSAutoImport.ServiceReference1.PutFileToNetworkResponse PutFileToNetwork(PMSAutoImport.ServiceReference1.PutFileToNetworkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadFileAndUploadToFTP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DownloadFileAndUploadToFTP(string folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DelFolderFromNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DelFolderFromNetwork(string sourceFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownFileFromDir", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] DownFileFromDir(string folder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PostMessageClientInvalidPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void PostMessageClientInvalidPassword(string clientId, string cmyId, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ResetProductCache", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ResetProductCache(string companyId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ResetReleatedProductsCacheByCompanyId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ResetReleatedProductsCacheByCompanyId(string companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoSubmitAfterCV", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AutoSubmitAfterCV();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoSubmitByJobIds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AutoSubmitByJobIds(string jobIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoSubmitJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AutoSubmitJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoSubmitJobs1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AutoSubmitJobs1();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoDispatchJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AutoDispatchJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLocations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLocations2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateLocations2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPaymentNewItemByInspectionId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetPaymentNewItemByInspectionId(string ezjobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInvoiceNewItemByInspectionId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetInvoiceNewItemByInspectionId(string ezjobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpectrumCallAttemptList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSpectrumCallAttemptList(string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SingelAutoDispatchJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SingelAutoDispatchJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddJobActionLogCheckRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddJobActionLogCheckRequest(string POLNUM, int companyId, int ownCoId, string productCode, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CrossCheckforFIS2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CrossCheckforFIS2(string POLNUM, int companyId, int ownCoId, string productCode, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProceedRecheckJobsForNFR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ProceedRecheckJobsForNFR(string jobsXml, int companyId, int ownCoId, int qcTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateJobIdForALTVE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateJobIdForALTVE(int ezJobId, string newPOLNUM);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckComplianceRules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CheckComplianceRules(int ezJobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SubmitJobInAspenGrove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SubmitJobInAspenGrove(int jobId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SubmitJobInClientSite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SubmitJobInClientSite(int jobId, string productCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFIS2CrossCheckJobs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int[] GetFIS2CrossCheckJobs(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAltOrders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAltOrders(string serviceURL, string requestXML, string authorization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Post4Altisource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Post4Altisource(string serviceURL, string requestXML, string authorization, string method);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateInvoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool GenerateInvoice(int id, int takenBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSourceXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSourceXml(int inspectionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SubmitJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SubmitJob(string serviceURL, string josnserdata, string authorization);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int userCompanyID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] f;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string fileName;
        
        public UploadFileRequest() {
        }
        
        public UploadFileRequest(int userCompanyID, byte[] f, string fileName) {
            this.userCompanyID = userCompanyID;
            this.f = f;
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileResult;
        
        public UploadFileResponse() {
        }
        
        public UploadFileResponse(string UploadFileResult) {
            this.UploadFileResult = UploadFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileForPPO", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileForPPORequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int riskID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] f;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string fileName;
        
        public UploadFileForPPORequest() {
        }
        
        public UploadFileForPPORequest(int companyId, int riskID, byte[] f, string fileName) {
            this.companyId = companyId;
            this.riskID = riskID;
            this.f = f;
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileForPPOResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileForPPOResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFileForPPOResult;
        
        public UploadFileForPPOResponse() {
        }
        
        public UploadFileForPPOResponse(string UploadFileForPPOResult) {
            this.UploadFileForPPOResult = UploadFileForPPOResult;
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtensionFx35 schema importer extension.
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InspSTDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    public partial class InspSTDataSet : global::System.Data.DataSet {
        
        private inspSTDataTable tableinspST;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public InspSTDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected InspSTDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["inspST"] != null)) {
                    base.Tables.Add(new inspSTDataTable(ds.Tables["inspST"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public inspSTDataTable inspST {
            get {
                return this.tableinspST;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            InspSTDataSet cln = ((InspSTDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["inspST"] != null)) {
                    base.Tables.Add(new inspSTDataTable(ds.Tables["inspST"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableinspST = ((inspSTDataTable)(base.Tables["inspST"]));
            if ((initTable == true)) {
                if ((this.tableinspST != null)) {
                    this.tableinspST.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "InspSTDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InspSTDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableinspST = new inspSTDataTable();
            base.Tables.Add(this.tableinspST);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeinspST() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InspSTDataSet ds = new InspSTDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void inspSTRowChangeEventHandler(object sender, inspSTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class inspSTDataTable : global::System.Data.TypedTableBase<inspSTRow> {
            
            private global::System.Data.DataColumn columninspectionId;
            
            private global::System.Data.DataColumn columnserviceType;
            
            private global::System.Data.DataColumn columnwTimeStamp;
            
            private global::System.Data.DataColumn columninstructions;
            
            private global::System.Data.DataColumn columnbillable;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnserviceRequest;
            
            private global::System.Data.DataColumn columnbidId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public inspSTDataTable() {
                this.TableName = "inspST";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal inspSTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected inspSTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn inspectionIdColumn {
                get {
                    return this.columninspectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn serviceTypeColumn {
                get {
                    return this.columnserviceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn wTimeStampColumn {
                get {
                    return this.columnwTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn instructionsColumn {
                get {
                    return this.columninstructions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn billableColumn {
                get {
                    return this.columnbillable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn serviceRequestColumn {
                get {
                    return this.columnserviceRequest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn bidIdColumn {
                get {
                    return this.columnbidId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public inspSTRow this[int index] {
                get {
                    return ((inspSTRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event inspSTRowChangeEventHandler inspSTRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event inspSTRowChangeEventHandler inspSTRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event inspSTRowChangeEventHandler inspSTRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event inspSTRowChangeEventHandler inspSTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddinspSTRow(inspSTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public inspSTRow AddinspSTRow(int inspectionId, string serviceType, System.DateTime wTimeStamp, string instructions, string billable, string type, string serviceRequest, int bidId) {
                inspSTRow rowinspSTRow = ((inspSTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inspectionId,
                        serviceType,
                        wTimeStamp,
                        instructions,
                        billable,
                        type,
                        serviceRequest,
                        bidId};
                rowinspSTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinspSTRow);
                return rowinspSTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public inspSTRow FindByinspectionIdserviceType(int inspectionId, string serviceType) {
                return ((inspSTRow)(this.Rows.Find(new object[] {
                            inspectionId,
                            serviceType})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                inspSTDataTable cln = ((inspSTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new inspSTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columninspectionId = base.Columns["inspectionId"];
                this.columnserviceType = base.Columns["serviceType"];
                this.columnwTimeStamp = base.Columns["wTimeStamp"];
                this.columninstructions = base.Columns["instructions"];
                this.columnbillable = base.Columns["billable"];
                this.columntype = base.Columns["type"];
                this.columnserviceRequest = base.Columns["serviceRequest"];
                this.columnbidId = base.Columns["bidId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columninspectionId = new global::System.Data.DataColumn("inspectionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspectionId);
                this.columnserviceType = new global::System.Data.DataColumn("serviceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnserviceType);
                this.columnwTimeStamp = new global::System.Data.DataColumn("wTimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwTimeStamp);
                this.columninstructions = new global::System.Data.DataColumn("instructions", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninstructions);
                this.columnbillable = new global::System.Data.DataColumn("billable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbillable);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnserviceRequest = new global::System.Data.DataColumn("serviceRequest", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnserviceRequest);
                this.columnbidId = new global::System.Data.DataColumn("bidId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbidId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninspectionId,
                                this.columnserviceType}, true));
                this.columninspectionId.AllowDBNull = false;
                this.columnserviceType.AllowDBNull = false;
                this.columnserviceType.MaxLength = 200;
                this.columninstructions.MaxLength = 4000;
                this.columnbillable.DefaultValue = ((string)("1"));
                this.columntype.AllowDBNull = false;
                this.columntype.DefaultValue = ((string)("SR"));
                this.columnserviceRequest.MaxLength = 200;
                this.columnbidId.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public inspSTRow NewinspSTRow() {
                return ((inspSTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new inspSTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(inspSTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.inspSTRowChanged != null)) {
                    this.inspSTRowChanged(this, new inspSTRowChangeEvent(((inspSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.inspSTRowChanging != null)) {
                    this.inspSTRowChanging(this, new inspSTRowChangeEvent(((inspSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.inspSTRowDeleted != null)) {
                    this.inspSTRowDeleted(this, new inspSTRowChangeEvent(((inspSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.inspSTRowDeleting != null)) {
                    this.inspSTRowDeleting(this, new inspSTRowChangeEvent(((inspSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveinspSTRow(inspSTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InspSTDataSet ds = new InspSTDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "inspSTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class inspSTRow : global::System.Data.DataRow {
            
            private inspSTDataTable tableinspST;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal inspSTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinspST = ((inspSTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int inspectionId {
                get {
                    return ((int)(this[this.tableinspST.inspectionIdColumn]));
                }
                set {
                    this[this.tableinspST.inspectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string serviceType {
                get {
                    return ((string)(this[this.tableinspST.serviceTypeColumn]));
                }
                set {
                    this[this.tableinspST.serviceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime wTimeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableinspST.wTimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'wTimeStamp\' in table \'inspST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinspST.wTimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string instructions {
                get {
                    try {
                        return ((string)(this[this.tableinspST.instructionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instructions\' in table \'inspST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinspST.instructionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string billable {
                get {
                    try {
                        return ((string)(this[this.tableinspST.billableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'billable\' in table \'inspST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinspST.billableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string type {
                get {
                    return ((string)(this[this.tableinspST.typeColumn]));
                }
                set {
                    this[this.tableinspST.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string serviceRequest {
                get {
                    try {
                        return ((string)(this[this.tableinspST.serviceRequestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'serviceRequest\' in table \'inspST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinspST.serviceRequestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int bidId {
                get {
                    try {
                        return ((int)(this[this.tableinspST.bidIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bidId\' in table \'inspST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinspST.bidIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IswTimeStampNull() {
                return this.IsNull(this.tableinspST.wTimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetwTimeStampNull() {
                this[this.tableinspST.wTimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsinstructionsNull() {
                return this.IsNull(this.tableinspST.instructionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetinstructionsNull() {
                this[this.tableinspST.instructionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsbillableNull() {
                return this.IsNull(this.tableinspST.billableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetbillableNull() {
                this[this.tableinspST.billableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsserviceRequestNull() {
                return this.IsNull(this.tableinspST.serviceRequestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetserviceRequestNull() {
                this[this.tableinspST.serviceRequestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsbidIdNull() {
                return this.IsNull(this.tableinspST.bidIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetbidIdNull() {
                this[this.tableinspST.bidIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class inspSTRowChangeEvent : global::System.EventArgs {
            
            private inspSTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public inspSTRowChangeEvent(inspSTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public inspSTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PutFileToNetwork", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PutFileToNetworkRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] f;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string networkPath;
        
        public PutFileToNetworkRequest() {
        }
        
        public PutFileToNetworkRequest(string fileName, byte[] f, string networkPath) {
            this.fileName = fileName;
            this.f = f;
            this.networkPath = networkPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PutFileToNetworkResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PutFileToNetworkResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool PutFileToNetworkResult;
        
        public PutFileToNetworkResponse() {
        }
        
        public PutFileToNetworkResponse(bool PutFileToNetworkResult) {
            this.PutFileToNetworkResult = PutFileToNetworkResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ezUpdaterServicesSoapChannel : PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ezUpdaterServicesSoapClient : System.ServiceModel.ClientBase<PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap>, PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap {
        
        public ezUpdaterServicesSoapClient() {
        }
        
        public ezUpdaterServicesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ezUpdaterServicesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ezUpdaterServicesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ezUpdaterServicesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SendAsyncEmail() {
            return base.Channel.SendAsyncEmail();
        }
        
        public bool CheckDataEntryProcessing() {
            return base.Channel.CheckDataEntryProcessing();
        }
        
        public void Process4AltisourceInactiveJobs(string jobIDs, int companyId, int ownCoId) {
            base.Channel.Process4AltisourceInactiveJobs(jobIDs, companyId, ownCoId);
        }
        
        public void CopyXMLConfigEZToCustom(string productCode, int loginCompany) {
            base.Channel.CopyXMLConfigEZToCustom(productCode, loginCompany);
        }
        
        public object BaseSendRequestFIS(string login, string password, string xmlName, string xml, string xmlPatch) {
            return base.Channel.BaseSendRequestFIS(login, password, xmlName, xml, xmlPatch);
        }
        
        public object BaseSendRequestFISWeb(string login, string password, string xmlName, string xml, string xmlPatch) {
            return base.Channel.BaseSendRequestFISWeb(login, password, xmlName, xml, xmlPatch);
        }
        
        public string[] GetPublishFormUIFiles() {
            return base.Channel.GetPublishFormUIFiles();
        }
        
        public void UpdatePublishFormUIFiles(string[] files) {
            base.Channel.UpdatePublishFormUIFiles(files);
        }
        
        public string[] DownLoadPublishFormUIFiles(string[] files) {
            return base.Channel.DownLoadPublishFormUIFiles(files);
        }
        
        public string CheckIsMaintenance() {
            return base.Channel.CheckIsMaintenance();
        }
        
        public string IsRulesInXML(int loginCompanyId, int formCoId, string productCode) {
            return base.Channel.IsRulesInXML(loginCompanyId, formCoId, productCode);
        }
        
        public string GetInventoryCategory(int companyId, string stockkey) {
            return base.Channel.GetInventoryCategory(companyId, stockkey);
        }
        
        public string GetInventoryName(int companyId, string stockkey, string category, string name) {
            return base.Channel.GetInventoryName(companyId, stockkey, category, name);
        }
        
        public string GetNFRInspection(string url) {
            return base.Channel.GetNFRInspection(url);
        }
        
        public string VMSValidateToken(string serviceUrl, string postData) {
            return base.Channel.VMSValidateToken(serviceUrl, postData);
        }
        
        public string VMSPostData(string serviceUrl, string serviceMethod, string token, string postData) {
            return base.Channel.VMSPostData(serviceUrl, serviceMethod, token, postData);
        }
        
        public object CancelMBALTAWGFjobsinIL() {
            return base.Channel.CancelMBALTAWGFjobsinIL();
        }
        
        public string GetQuickPrefixQ(string str1, string str2, string str3) {
            return base.Channel.GetQuickPrefixQ(str1, str2, str3);
        }
        
        public string GetLatestNotification(string companyId) {
            return base.Channel.GetLatestNotification(companyId);
        }
        
        public string GetPropertyPrefixQ(string str1, string str2) {
            return base.Channel.GetPropertyPrefixQ(str1, str2);
        }
        
        public string GetExistJobAddressPrefix(int companyId, int ownerCoId, int ownerContactId, string quickSearchAddress) {
            return base.Channel.GetExistJobAddressPrefix(companyId, ownerCoId, ownerContactId, quickSearchAddress);
        }
        
        public string GetLocationByUser(string login, string password, string ip) {
            return base.Channel.GetLocationByUser(login, password, ip);
        }
        
        public string Authenticate(string login, string password, string ip) {
            return base.Channel.Authenticate(login, password, ip);
        }
        
        public void SetLogOnStatus(int companyId, int formCoId, string productCode, int ownerCoId, bool accountInUse) {
            base.Channel.SetLogOnStatus(companyId, formCoId, productCode, ownerCoId, accountInUse);
        }
        
        public string GetClientSiteSubmissionByUserId(string userId) {
            return base.Channel.GetClientSiteSubmissionByUserId(userId);
        }
        
        public void ClearClientSitePassword(int formCoId, string productCode, string clientSiteLogin) {
            base.Channel.ClearClientSitePassword(formCoId, productCode, clientSiteLogin);
        }
        
        public void LogJobsSubmittedInClientSite(int userId, int[] jobIds) {
            base.Channel.LogJobsSubmittedInClientSite(userId, jobIds);
        }
        
        public void LogAttachmentsUploadedInClientSite(int riskId, string type, string stage, string exclusiveStages) {
            base.Channel.LogAttachmentsUploadedInClientSite(riskId, type, stage, exclusiveStages);
        }
        
        public void SetAttachmentsUploadedByID(int riskId, long[] list) {
            base.Channel.SetAttachmentsUploadedByID(riskId, list);
        }
        
        public void SetProductCodeByID(int riskId, string oldProductCode, string newProductCode) {
            base.Channel.SetProductCodeByID(riskId, oldProductCode, newProductCode);
        }
        
        public void LogEzUpdaterException(int jobId, string machine, string message, string exceptionStackTrace, int level) {
            base.Channel.LogEzUpdaterException(jobId, machine, message, exceptionStackTrace, level);
        }
        
        public bool HasUrgentJobNotBeingProcessed(int robotId) {
            return base.Channel.HasUrgentJobNotBeingProcessed(robotId);
        }
        
        public string ImportFiles(int userID, int userCompanyID, int ownerCoID, int formCoID, string productCode, string fileType, string fileName, bool filterOutDuplicateJobs, bool autoDispatchJobs, int dueDateDiff) {
            return base.Channel.ImportFiles(userID, userCompanyID, ownerCoID, formCoID, productCode, fileType, fileName, filterOutDuplicateJobs, autoDispatchJobs, dueDateDiff);
        }
        
        public void ChangeStatusForComingOrPastDueJobs(string jobIDs, int companyId, int ownCoId, string productCode, string checkId) {
            base.Channel.ChangeStatusForComingOrPastDueJobs(jobIDs, companyId, ownCoId, productCode, checkId);
        }
        
        public string GetJobsNotExistInEz(string productCode, string jobIDs, int companyId, int ownCoId, int formCoId) {
            return base.Channel.GetJobsNotExistInEz(productCode, jobIDs, companyId, ownCoId, formCoId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PMSAutoImport.ServiceReference1.UploadFileResponse PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap.UploadFile(PMSAutoImport.ServiceReference1.UploadFileRequest request) {
            return base.Channel.UploadFile(request);
        }
        
        public string UploadFile(int userCompanyID, byte[] f, string fileName) {
            PMSAutoImport.ServiceReference1.UploadFileRequest inValue = new PMSAutoImport.ServiceReference1.UploadFileRequest();
            inValue.userCompanyID = userCompanyID;
            inValue.f = f;
            inValue.fileName = fileName;
            PMSAutoImport.ServiceReference1.UploadFileResponse retVal = ((PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap)(this)).UploadFile(inValue);
            return retVal.UploadFileResult;
        }
        
        public string GetClientSiteInfoByIPAndType(string ip, int jobType, System.DateTime startTime) {
            return base.Channel.GetClientSiteInfoByIPAndType(ip, jobType, startTime);
        }
        
        public void UpdateJobProgress(int companyId, int formCoId, string productCode, int ownerCoId, string machine, int jobType) {
            base.Channel.UpdateJobProgress(companyId, formCoId, productCode, ownerCoId, machine, jobType);
        }
        
        public void UpdateJobLastSuccessOn(int companyId, int formCoId, string productCode, int ownerCoId, int jobType, string lastSuccessOn) {
            base.Channel.UpdateJobLastSuccessOn(companyId, formCoId, productCode, ownerCoId, jobType, lastSuccessOn);
        }
        
        public System.Data.DataSet GetClientSiteSubmissionByProductCode(string prodCode) {
            return base.Channel.GetClientSiteSubmissionByProductCode(prodCode);
        }
        
        public object CancelJobsByPOLNums(object[] polNums, int companyId, string prodCode, int ownerId) {
            return base.Channel.CancelJobsByPOLNums(polNums, companyId, prodCode, ownerId);
        }
        
        public object ReassignJobsByPOLNums(object[] polNums, int companyId, string prodCode, int ownerId) {
            return base.Channel.ReassignJobsByPOLNums(polNums, companyId, prodCode, ownerId);
        }
        
        public object[] CancelJobsFromFile(string filePath, string prodType, int companyId, string prodCode, int ownerId) {
            return base.Channel.CancelJobsFromFile(filePath, prodType, companyId, prodCode, ownerId);
        }
        
        public object[] GetPOLNumsFromFile(string filePath, string prodType) {
            return base.Channel.GetPOLNumsFromFile(filePath, prodType);
        }
        
        public string ProcessJobsInAwaitingPhotoBucket(string jobIDs, int companyId, int ownCoId) {
            return base.Channel.ProcessJobsInAwaitingPhotoBucket(jobIDs, companyId, ownCoId);
        }
        
        public bool SendEmail(string emailFrom, string emailTo, string emailCc, string emailBcc, string emailSubject, string emailBody, string errMsg) {
            return base.Channel.SendEmail(emailFrom, emailTo, emailCc, emailBcc, emailSubject, emailBody, errMsg);
        }
        
        public bool SendHtmlEmail(string emailFrom, string emailTo, string emailCc, string emailBcc, string emailSubject, string emailBody, string errMsg) {
            return base.Channel.SendHtmlEmail(emailFrom, emailTo, emailCc, emailBcc, emailSubject, emailBody, errMsg);
        }
        
        public string GetPPOJobsWithoutCover(int companyId, int formCoId, int ownerCoId, string productCode) {
            return base.Channel.GetPPOJobsWithoutCover(companyId, formCoId, ownerCoId, productCode);
        }
        
        public string GetMSICPRWithoutScope(int companyId, int formCoId, int ownerCoId, string productCode) {
            return base.Channel.GetMSICPRWithoutScope(companyId, formCoId, ownerCoId, productCode);
        }
        
        public string GetCallAttemptJobs(int companyId, int formCoId, int ownerCoId, string productCode) {
            return base.Channel.GetCallAttemptJobs(companyId, formCoId, ownerCoId, productCode);
        }
        
        public void UpdateCallAttemptJob(int companyId, int inspectionId, int riskId, bool needQC, string note) {
            base.Channel.UpdateCallAttemptJob(companyId, inspectionId, riskId, needQC, note);
        }
        
        public string GetMCSJobWithoutLegal(int companyId, int formCoId, int ownerCoId, string productCode) {
            return base.Channel.GetMCSJobWithoutLegal(companyId, formCoId, ownerCoId, productCode);
        }
        
        public bool ClearMCSLegalDoc(int riskId, string fileNamePrefix) {
            return base.Channel.ClearMCSLegalDoc(riskId, fileNamePrefix);
        }
        
        public bool InsertJobAttachment(int companyId, int formCoId, string productCode, int riskId, double size, string fileName) {
            return base.Channel.InsertJobAttachment(companyId, formCoId, productCode, riskId, size, fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PMSAutoImport.ServiceReference1.UploadFileForPPOResponse PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap.UploadFileForPPO(PMSAutoImport.ServiceReference1.UploadFileForPPORequest request) {
            return base.Channel.UploadFileForPPO(request);
        }
        
        public string UploadFileForPPO(int companyId, int riskID, byte[] f, string fileName) {
            PMSAutoImport.ServiceReference1.UploadFileForPPORequest inValue = new PMSAutoImport.ServiceReference1.UploadFileForPPORequest();
            inValue.companyId = companyId;
            inValue.riskID = riskID;
            inValue.f = f;
            inValue.fileName = fileName;
            PMSAutoImport.ServiceReference1.UploadFileForPPOResponse retVal = ((PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap)(this)).UploadFileForPPO(inValue);
            return retVal.UploadFileForPPOResult;
        }
        
        public void AutoDispatch(object[] inspectionIds, int companyId) {
            base.Channel.AutoDispatch(inspectionIds, companyId);
        }
        
        public void ChangeJobsStatus(object[] jobIds, string status, bool changeByEziSystem) {
            base.Channel.ChangeJobsStatus(jobIds, status, changeByEziSystem);
        }
        
        public string GetJobStatus(int inspectionId) {
            return base.Channel.GetJobStatus(inspectionId);
        }
        
        public object TransferLPSData(string uploadXml) {
            return base.Channel.TransferLPSData(uploadXml);
        }
        
        public string GetAllJobsByCompanyIdAndStatus(int companyId, int ownerCoId, string status, string productCode) {
            return base.Channel.GetAllJobsByCompanyIdAndStatus(companyId, ownerCoId, status, productCode);
        }
        
        public string AutoChangeWindowDateForMCS(string fileName, int companyId, int ownerCoId, int formCoId) {
            return base.Channel.AutoChangeWindowDateForMCS(fileName, companyId, ownerCoId, formCoId);
        }
        
        public void InsertPreviousPhoto(int riskId, string photoURL) {
            base.Channel.InsertPreviousPhoto(riskId, photoURL);
        }
        
        public void UpdateClientSiteSubmissionProgressUpdatedOn(int dataEntry, int formCold, string productCode, int ownerCoId, string ip) {
            base.Channel.UpdateClientSiteSubmissionProgressUpdatedOn(dataEntry, formCold, productCode, ownerCoId, ip);
        }
        
        public int AutoSetMCSPassword(int companyId, string productCode, int dataEntry, string vendorLogin, string oldPwd, string newPwd) {
            return base.Channel.AutoSetMCSPassword(companyId, productCode, dataEntry, vendorLogin, oldPwd, newPwd);
        }
        
        public int AutoChangeClientSiteAccountPassword(int companyId, int formCoId, string productCode, int ownerCoId, string newPassword) {
            return base.Channel.AutoChangeClientSiteAccountPassword(companyId, formCoId, productCode, ownerCoId, newPassword);
        }
        
        public string GetJobsForReUpload(int companyId, int ownerCoId, string productCode, string status) {
            return base.Channel.GetJobsForReUpload(companyId, ownerCoId, productCode, status);
        }
        
        public void SetAttachmentsUploaded(int riskId, string type, string stage) {
            base.Channel.SetAttachmentsUploaded(riskId, type, stage);
        }
        
        public void InsertBACRequestChecking(int inspectionId, int companyId, int ownerCoId, int formCoId, string polnum, int requestId, string productCode) {
            base.Channel.InsertBACRequestChecking(inspectionId, companyId, ownerCoId, formCoId, polnum, requestId, productCode);
        }
        
        public void DeleteBACRequestChecking(int inspectionId) {
            base.Channel.DeleteBACRequestChecking(inspectionId);
        }
        
        public string GetDocumentsForUploadByBACService(int inspectionId) {
            return base.Channel.GetDocumentsForUploadByBACService(inspectionId);
        }
        
        public string GetJobsForReqestChecking() {
            return base.Channel.GetJobsForReqestChecking();
        }
        
        public string GetClientSiteSubmissionAccountInfo(int companyId, int ownerCoId, int formCoId, string productCode) {
            return base.Channel.GetClientSiteSubmissionAccountInfo(companyId, ownerCoId, formCoId, productCode);
        }
        
        public bool HasRanByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType) {
            return base.Channel.HasRanByCheckingAutoJobsFlag(companyId, ownerCoId, formCoId, productCode, jobType);
        }
        
        public System.DateTime GetLastRunTimeByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType) {
            return base.Channel.GetLastRunTimeByCheckingAutoJobsFlag(companyId, ownerCoId, formCoId, productCode, jobType);
        }
        
        public void UpdateProgressByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType) {
            base.Channel.UpdateProgressByCheckingAutoJobsFlag(companyId, ownerCoId, formCoId, productCode, jobType);
        }
        
        public void ResetProgressByCheckingAutoJobsFlag(int companyId, int ownerCoId, int formCoId, string productCode, string jobType) {
            base.Channel.ResetProgressByCheckingAutoJobsFlag(companyId, ownerCoId, formCoId, productCode, jobType);
        }
        
        public void ProceedRecheckJobs(string jobsXml, int companyId, int ownCoId, int qcTypeId) {
            base.Channel.ProceedRecheckJobs(jobsXml, companyId, ownCoId, qcTypeId);
        }
        
        public void AddQCNoteForAwatingPhotoJob(string polnum, int companyId, int ownCoId, string productCode, string note) {
            base.Channel.AddQCNoteForAwatingPhotoJob(polnum, companyId, ownCoId, productCode, note);
        }
        
        public void InsertImportFailedJobsForRecheck(int companyId, int ownerCoId, int formCoId, string polnum, string productCode) {
            base.Channel.InsertImportFailedJobsForRecheck(companyId, ownerCoId, formCoId, polnum, productCode);
        }
        
        public void DeleteImportFailedJobsForRecheck(string Id) {
            base.Channel.DeleteImportFailedJobsForRecheck(Id);
        }
        
        public string GetImportFailedJobsForRecheck() {
            return base.Channel.GetImportFailedJobsForRecheck();
        }
        
        public string GetSystemSettingValue(string settingCode) {
            return base.Channel.GetSystemSettingValue(settingCode);
        }
        
        public string GetCheckingPendingJob(string productCode, int companyId, int ownCoId, int formCoId) {
            return base.Channel.GetCheckingPendingJob(productCode, companyId, ownCoId, formCoId);
        }
        
        public void AddJobActionLogForRequestChecking(int inspectionID, int requestID, string status) {
            base.Channel.AddJobActionLogForRequestChecking(inspectionID, requestID, status);
        }
        
        public void AddJobActionLog(int inspectionID, int jobActionID, string additionalInfo, int takenBy) {
            base.Channel.AddJobActionLog(inspectionID, jobActionID, additionalInfo, takenBy);
        }
        
        public void AddQCForJob(int inspectionId, int qcTypeID) {
            base.Channel.AddQCForJob(inspectionId, qcTypeID);
        }
        
        public void AddQCForJobWithNote(string jobID, int companyId, int ownCoId, string productCode, int qcTypeId, string note) {
            base.Channel.AddQCForJobWithNote(jobID, companyId, ownCoId, productCode, qcTypeId, note);
        }
        
        public void RedoJobWithNote(string jobID, int companyId, int ownCoId, string productCode, string note) {
            base.Channel.RedoJobWithNote(jobID, companyId, ownCoId, productCode, note);
        }
        
        public string GetCompnaySiteLocation(int companyId) {
            return base.Channel.GetCompnaySiteLocation(companyId);
        }
        
        public System.Data.DataSet GetClientSiteSubmission(int companyId, string productCode, int ownerId) {
            return base.Channel.GetClientSiteSubmission(companyId, productCode, ownerId);
        }
        
        public System.Data.DataSet GetClientSiteSubmissionAll(int companyId, string productCode, int ownerId) {
            return base.Channel.GetClientSiteSubmissionAll(companyId, productCode, ownerId);
        }
        
        public string GetPastDueJobsForSPIINSP(string fileName, int companyId, int ownCoId, string productCode) {
            return base.Channel.GetPastDueJobsForSPIINSP(fileName, companyId, ownCoId, productCode);
        }
        
        public string GetPhotoCrossCheckJobsForSPIINSP(string fileName, int companyId, int ownCoId, string productCode) {
            return base.Channel.GetPhotoCrossCheckJobsForSPIINSP(fileName, companyId, ownCoId, productCode);
        }
        
        public string GetSubmittedJobs(string jobIDs, int companyId, int ownCoId, string productCode) {
            return base.Channel.GetSubmittedJobs(jobIDs, companyId, ownCoId, productCode);
        }
        
        public void ResetAttachmentUploaded() {
            base.Channel.ResetAttachmentUploaded();
        }
        
        public void UpdateLastUpdatedOnForImportationProgress(int hour, int companyId, string productCode) {
            base.Channel.UpdateLastUpdatedOnForImportationProgress(hour, companyId, productCode);
        }
        
        public void LogAutomationProgramStarted(string executionId, int applicationType, int companyId, int formCoId, string productCode, int ownerCoId, string ip) {
            base.Channel.LogAutomationProgramStarted(executionId, applicationType, companyId, formCoId, productCode, ownerCoId, ip);
        }
        
        public void LogAutomationProgramResult(string executionId, string status, string resultDetails) {
            base.Channel.LogAutomationProgramResult(executionId, status, resultDetails);
        }
        
        public string CheckSPIPDFFile(int companyId, string fileName) {
            return base.Channel.CheckSPIPDFFile(companyId, fileName);
        }
        
        public void UpdateInsptn(int inspectionId, string fctGrpCode, string prcFctCode, string value) {
            base.Channel.UpdateInsptn(inspectionId, fctGrpCode, prcFctCode, value);
        }
        
        public string GetJobFactorValue(int inspectionId, string fctGrpCode, string prcFctCode) {
            return base.Channel.GetJobFactorValue(inspectionId, fctGrpCode, prcFctCode);
        }
        
        public bool UpdateInspST(PMSAutoImport.ServiceReference1.InspSTDataSet ds, int inspectionId, string note) {
            return base.Channel.UpdateInspST(ds, inspectionId, note);
        }
        
        public void UpdateWebserviceCountForMCS(string functionName, System.DateTime time) {
            base.Channel.UpdateWebserviceCountForMCS(functionName, time);
        }
        
        public string GetMCSLoginTokenByCode(string companyId, string ownerCoId, string productCode) {
            return base.Channel.GetMCSLoginTokenByCode(companyId, ownerCoId, productCode);
        }
        
        public string GetMCSLoginToken(string companyId, string ownerCoId) {
            return base.Channel.GetMCSLoginToken(companyId, ownerCoId);
        }
        
        public void AddQCForSPIGCJobWithNote(string jobID, int companyId, int ownCoId, string productCode, int qcTypeId, string note) {
            base.Channel.AddQCForSPIGCJobWithNote(jobID, companyId, ownCoId, productCode, qcTypeId, note);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PMSAutoImport.ServiceReference1.PutFileToNetworkResponse PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap.PutFileToNetwork(PMSAutoImport.ServiceReference1.PutFileToNetworkRequest request) {
            return base.Channel.PutFileToNetwork(request);
        }
        
        public bool PutFileToNetwork(string fileName, byte[] f, string networkPath) {
            PMSAutoImport.ServiceReference1.PutFileToNetworkRequest inValue = new PMSAutoImport.ServiceReference1.PutFileToNetworkRequest();
            inValue.fileName = fileName;
            inValue.f = f;
            inValue.networkPath = networkPath;
            PMSAutoImport.ServiceReference1.PutFileToNetworkResponse retVal = ((PMSAutoImport.ServiceReference1.ezUpdaterServicesSoap)(this)).PutFileToNetwork(inValue);
            return retVal.PutFileToNetworkResult;
        }
        
        public void DownloadFileAndUploadToFTP(string folder) {
            base.Channel.DownloadFileAndUploadToFTP(folder);
        }
        
        public void DelFolderFromNetwork(string sourceFolder) {
            base.Channel.DelFolderFromNetwork(sourceFolder);
        }
        
        public string[] DownFileFromDir(string folder) {
            return base.Channel.DownFileFromDir(folder);
        }
        
        public void PostMessageClientInvalidPassword(string clientId, string cmyId, string login) {
            base.Channel.PostMessageClientInvalidPassword(clientId, cmyId, login);
        }
        
        public void ResetProductCache(string companyId, string productCode) {
            base.Channel.ResetProductCache(companyId, productCode);
        }
        
        public void ResetReleatedProductsCacheByCompanyId(string companyId) {
            base.Channel.ResetReleatedProductsCacheByCompanyId(companyId);
        }
        
        public void AutoSubmitAfterCV() {
            base.Channel.AutoSubmitAfterCV();
        }
        
        public void AutoSubmitByJobIds(string jobIds) {
            base.Channel.AutoSubmitByJobIds(jobIds);
        }
        
        public bool AutoSubmitJobs() {
            return base.Channel.AutoSubmitJobs();
        }
        
        public bool AutoSubmitJobs1() {
            return base.Channel.AutoSubmitJobs1();
        }
        
        public void AutoDispatchJobs() {
            base.Channel.AutoDispatchJobs();
        }
        
        public void UpdateLocations() {
            base.Channel.UpdateLocations();
        }
        
        public bool UpdateLocations2() {
            return base.Channel.UpdateLocations2();
        }
        
        public decimal GetPaymentNewItemByInspectionId(string ezjobId) {
            return base.Channel.GetPaymentNewItemByInspectionId(ezjobId);
        }
        
        public decimal GetInvoiceNewItemByInspectionId(string ezjobId) {
            return base.Channel.GetInvoiceNewItemByInspectionId(ezjobId);
        }
        
        public string GetSpectrumCallAttemptList(string productCode) {
            return base.Channel.GetSpectrumCallAttemptList(productCode);
        }
        
        public bool SingelAutoDispatchJobs() {
            return base.Channel.SingelAutoDispatchJobs();
        }
        
        public void AddJobActionLogCheckRequest(string POLNUM, int companyId, int ownCoId, string productCode, string note) {
            base.Channel.AddJobActionLogCheckRequest(POLNUM, companyId, ownCoId, productCode, note);
        }
        
        public void CrossCheckforFIS2(string POLNUM, int companyId, int ownCoId, string productCode, string note) {
            base.Channel.CrossCheckforFIS2(POLNUM, companyId, ownCoId, productCode, note);
        }
        
        public string ProceedRecheckJobsForNFR(string jobsXml, int companyId, int ownCoId, int qcTypeId) {
            return base.Channel.ProceedRecheckJobsForNFR(jobsXml, companyId, ownCoId, qcTypeId);
        }
        
        public void UpdateJobIdForALTVE(int ezJobId, string newPOLNUM) {
            base.Channel.UpdateJobIdForALTVE(ezJobId, newPOLNUM);
        }
        
        public bool CheckComplianceRules(int ezJobId) {
            return base.Channel.CheckComplianceRules(ezJobId);
        }
        
        public string SubmitJobInAspenGrove(int jobId, string productCode) {
            return base.Channel.SubmitJobInAspenGrove(jobId, productCode);
        }
        
        public string SubmitJobInClientSite(int jobId, string productCode) {
            return base.Channel.SubmitJobInClientSite(jobId, productCode);
        }
        
        public int[] GetFIS2CrossCheckJobs(int companyId) {
            return base.Channel.GetFIS2CrossCheckJobs(companyId);
        }
        
        public string GetAltOrders(string serviceURL, string requestXML, string authorization) {
            return base.Channel.GetAltOrders(serviceURL, requestXML, authorization);
        }
        
        public string Post4Altisource(string serviceURL, string requestXML, string authorization, string method) {
            return base.Channel.Post4Altisource(serviceURL, requestXML, authorization, method);
        }
        
        public bool GenerateInvoice(int id, int takenBy) {
            return base.Channel.GenerateInvoice(id, takenBy);
        }
        
        public string GetSourceXml(int inspectionId) {
            return base.Channel.GetSourceXml(inspectionId);
        }
        
        public string SubmitJob(string serviceURL, string josnserdata, string authorization) {
            return base.Channel.SubmitJob(serviceURL, josnserdata, authorization);
        }
    }
}
